# Prevent Nginx from sending in the `Server` response header its
# exact version number.
# https://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens
server_tokens off;

# Log errors and warnings to this file
# This is only used when you don't override it on a server{} level
# Default: logs/error.log error
# https://nginx.org/en/docs/ngx_core_module.html#error_log
error_log logs/error.log error;

# include conf.d/mime.types;

# Default: text/plain
# https://nginx.org/en/docs/http/ngx_http_core_module.html#default_type
# default_type application/octet-stream;

# Specify a charset
# https://nginx.org/en/docs/http/ngx_http_charset_module.html#charset
charset utf-8;

# Update charset_types to match updated mime.types.
# text/html is always included by charset module.
# Default: text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml
# https://nginx.org/en/docs/http/ngx_http_charset_module.html#charset_types
charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    text/javascript
    application/json
    application/rss+xml
    application/xml;

# Include $http_x_forwarded_for within default format used in log files
# https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
log_format  clst  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

# Log access to this file
# This is only used when you don't override it on a server{} level
# Default: logs/access.log combined
# https://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
access_log logs/access.log clst;

# ----------------------------------------------------------------------
# | Compression                                                        |
# ----------------------------------------------------------------------
# https://nginx.org/en/docs/http/ngx_http_gzip_module.html

# Enable gzip compression.
# Default: off
gzip on;

# Compression level (1-9).
# 5 is a perfect compromise between size and CPU usage, offering about
# 75% reduction for most ASCII files (almost identical to level 9).
# Default: 1
gzip_comp_level 5;

# Don't compress anything that's already small and unlikely to shrink much
# if at all (the default is 20 bytes, which is bad as that usually leads to
# larger files after gzipping).
# Default: 20
gzip_min_length 256;

# Compress data even for clients that are connecting to us via proxies,
# identified by the "Via" header (required for CloudFront).
# Default: off
gzip_proxied any;

# Tell proxies to cache both the gzipped and regular version of a resource
# whenever the client's Accept-Encoding capabilities header varies;
# Avoids the issue where a non-gzip capable client (which is extremely rare
# today) would display gibberish if their proxy gave them the gzipped version.
# Default: off
gzip_vary on;

# Compress all output labeled with one of the following MIME-types.
# text/html is always compressed by gzip module.
# Default: text/html
gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/ld+json
  application/manifest+json
  application/rss+xml
  application/geo+json
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  application/rdf+xml
  font/collection
  font/opentype
  font/otf
  font/ttf
  image/bmp
  image/svg+xml
  image/x-icon
  text/cache-manifest
  text/css
  text/javascript
  text/plain
  text/vcard
  text/vnd.rim.location.xloc
  text/vtt
  text/x-component
  text/x-cross-domain-policy;

# This should be turned on if you are going to have pre-compressed copies (.gz) of
# static files available. If not it should be left off as it will cause extra I/O
# for the check. It is best if you enable this in a location{} block for
# a specific directory, or on an individual server{} level.
# gzip_static on;

server {
    server_name ckl.st;
    listen 80;
    listen [::]:80;
    return 301 http://ch.ckl.st$request_uri;
}

server {
    server_name ch.ckl.st;
    listen 80 http2;
    listen [::]:80 http2;
    location ~* /\.(?!well-known\/) {
        deny all;
    }

    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }

    # ----------------------------------------------------------------------
    # | Cache expiration                                                   |
    # ----------------------------------------------------------------------
    # Serve resources with far-future expiration date.
    #
    # (!) If you don't control versioning with filename-based
    # cache busting, you should consider lowering the cache times
    # to something like one week.
    #
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
    # https://nginx.org/en/docs/http/ngx_http_headers_module.html#expires

    # No default expire rule. This config mirrors that of apache as outlined in the
    # html5-boilerplate .htaccess file. However, nginx applies rules by location,
    # the apache rules are defined by type. A consequence of this difference is that
    # if you use no file extension in the url and serve html, with apache you get an
    # expire time of 0s, with nginx you'd get an expire header of one month in the
    # future (if the default expire rule is 1 month). Therefore, do not use a
    # default expire rule with nginx unless your site is completely static

    # Documents
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        expires epoch;
    }

    # Feeds
    location ~* \.(?:rss|atom)$ {
        expires 1h;
    }

    # Media files
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
        access_log off;
        expires 1M;
    }

    # Media: svgz files are already compressed.
    location ~* \.svgz$ {
        access_log off;
        gzip off;
        expires 1M;
    }

    # CSS and JavaScript
    location ~* \.(?:css|js)$ {
        expires 1y;
        access_log off;
    }

    # Web fonts
    # If you are NOT using cross-domain-fonts.conf, uncomment the following directive
    location ~* \.(?:eot|otf|tt[cf]|woff2?)$ {
        expires 1y;
        access_log off;
    }

    # ----------------------------------------------------------------------
    # | Cross-origin images                                                |
    # ----------------------------------------------------------------------
    # Send the CORS header for images when browsers request it.
    #
    # https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
    # https://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html

    location ~* \.(?:bmp|cur|gif|ico|jpe?g|png|svgz?|webp?)$ {
         # Also, set cache rules for images.
         #
         # https://nginx.org/en/docs/http/ngx_http_core_module.html#location
         access_log off;
         expires 1M;
    }

    # ----------------------------------------------------------------------
    # | Content transformation                                             |
    # ----------------------------------------------------------------------

    # Prevent intermediate caches or proxies (e.g.: such as the ones
    # used by mobile network providers) from modifying the website's
    # content.
    #
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
    # https://tools.ietf.org/html/rfc2616#section-14.9.5
    #
    # (!) If you are using `ngx_pagespeed`, please note that setting
    # the `Cache-Control: no-transform` response header will prevent
    # `PageSpeed` from rewriting `HTML` files, and, if the
    # `pagespeed DisableRewriteOnNoTransform off` directive isn't used,
    # also from rewriting other resources.
    #
    # https://developers.google.com/speed/pagespeed/module/configuration#notransform

    add_header Cache-Control "no-transform";

    # ----------------------------------------------------------------------
    # | Cross-origin requests                                              |
    # ----------------------------------------------------------------------
    # Allow cross-origin requests.
    #
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
    # https://enable-cors.org/
    # https://www.w3.org/TR/cors/

    # (!) Do not use this without understanding the consequences.
    #     This will permit access from any other website.
    #
    # Instead of using this file, consider using a specific rule such as:
    #
    # Allow access based on [sub]domain:
    #    add_header Access-Control-Allow-Origin "subdomain.example.com";
    #    add_header Access-Control-Allow-Origin "*";

    location / {
        if ($http_origin ~ "^https?://(.+\.)?ckl\.st$") {
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With" always;
            add_header Access-Control-Expose-Headers "Authorization" always;
        }

        if ($request_method = "OPTIONS") {
            # Tell client that this pre-flight info is valid for 20 days
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    #security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    #CSP
    add_header Content-Security-Policy "default-src 'self' https:; base-uri 'self'; form-action 'self'; script-src 'self' 'unsafe-inline' https://storage.googleapis.com https://ckl.matomo.cloud; object-src 'none'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/; img-src 'self' https://ckl.matomo.cloud data: https://api.ch.ckl.st; media-src 'self'; frame-src 'self' https://w.soundcloud.com https://www.youtube.com; font-src 'self' https://fonts.gstatic.com; connect-src https://*.ckl.st; upgrade-insecure-requests;" always;
    add_header X-Content-Security-Policy "default-src 'self' https:; base-uri 'self'; form-action 'self'; script-src 'self' 'unsafe-inline' https://storage.googleapis.com https://ckl.matomo.cloud; object-src 'none'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/; img-src 'self' https://ckl.matomo.cloud data: https://api.ch.ckl.st; media-src 'self'; frame-src 'self' https://w.soundcloud.com https://www.youtube.com; font-src 'self' https://fonts.gstatic.com; connect-src https://*.ckl.st; upgrade-insecure-requests;" always;
    add_header X-WebKit-CSP "default-src 'self' https:; base-uri 'self'; form-action 'self'; script-src 'self' 'unsafe-inline' https://storage.googleapis.com https://ckl.matomo.cloud; object-src 'none'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/; img-src 'self' https://ckl.matomo.cloud data: https://api.ch.ckl.st; media-src 'self'; frame-src 'self' https://w.soundcloud.com https://www.youtube.com; font-src 'self' https://fonts.gstatic.com; connect-src https://*.ckl.st; upgrade-insecure-requests;" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /index.html;

    # Custom 404 page
    error_page 404 /index.html;
}
